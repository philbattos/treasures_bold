%script{:src => "https://maps.googleapis.com/maps/api/js?key=#{ENV['OLD_GOOGLE_MAPS_API_KEY']}"}

:javascript
  var markers = {};
  function initialize() {
    var mapOptions = {
      center: new google.maps.LatLng(42.833014, -108.7306725), // default center is Lander, WY
      zoom: 9,
      mapTypeControl: true,
      mapTypeControlOptions: {
        style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR
      },
      zoomControl: true,
      zoomControlOptions: {
        style: google.maps.ZoomControlStyle.MEDIUM
      },
      panControl: false,
      streetViewControl: false,
      scaleControl: false, // shows up in map footer, which is currently below the edge of the window frame
      mapTypeId: google.maps.MapTypeId.TERRAIN,
      backgroundColor: 'tan'
    };

    var map = new google.maps.Map(document.getElementById("map"), mapOptions);

    if (gon.results_count > 0) {
      var bounds = new google.maps.LatLngBounds();
      // if there are no search results, we don't want to set a "bounds" value because it will re-center the map in the ocean

      Object.entries(gon.search_results).forEach(([index, result]) => {
        Object.entries(result).forEach(([keyword, mapData]) => {
          mapData.landings.forEach(landing => {
            // generate coordinates
            var latDec = landing.lat_decimal;
            var longDec = landing.long_decimal;
            var coordinates = new google.maps.LatLng(latDec, longDec);

            // we need a distinct reference for each landing
            // var geoName = 'geo' + landing.feature_id;
            // window[geoName] = coordinates;

            // generate markers
            var markerIcon = mapData.marker;
            var newMarker = new google.maps.Marker({
              position: coordinates,
              map: map,
              draggable: false,
              icon: markerIcon // we send icon url in search results so that we can use different color icons for different keywords
              // icon: 'http://maps.google.com/mapfiles/ms/icons/purple.png',
            });
            var markerName = 'marker' + landing.feature_id;
            window[markerName] = newMarker;
            markers[landing.feature_id] = markerName;

            // zoom out to fit all markers
            bounds.extend(coordinates);

            // content to be displayed in infoWindows
            var contentString =
              '<div id="content" style="width: 110%; font-size: 18px; line-height: 24px;">' +
              '<div id="firstHeading" class="firstHeading", style="font-size: 22px; color: #725722;">' +
              '<b>' + landing.feature_name + '</b>' +
              // '<div id="bodyContent">'+
              '<div style="font-size: 18px; color: #3a3a3a;">place type: ' +
              '<b>' + landing.feature_class + '</b>' +
              '<br>county: <b>' + landing.county + ', ' + landing.state + '</b>' +
              '<br>latitude: <b>' + landing.lat_decimal + '</b>' +
              '<br>longitude: <strong>' + landing.long_decimal + '</strong>' +
              '<br>elevation: <b>' + landing.elevation + 'ft.</b>' +
              '</div>' +
              '</div>' +
              '</div>';

            // create infoWindows for each marker
            var infoWindowId = 'infowindow' + landing.feature_id;
            newInfoWindow = new google.maps.InfoWindow({
              content: contentString,
              disableAutoPan: true
            });
            window[infoWindowId] = newInfoWindow;

            // mouseover markers to display infowindows
            window[markerName].addListener('mouseover', function() {
              window[infoWindowId].open(map, this);
            });

            // remove infoWindow when mouse moves away
            window[markerName].addListener('mouseout', function() {
              window[infoWindowId].close(map, this);
            });
          }); // end search_results
        });
      });

      map.fitBounds(bounds);
    }

    // if there is only 1 location, the map will ignore the zoom level and zoom
    // in very close so we're adding a listener to control the zoom level
    var searchResultsCount = gon.results_count;
    console.log("searchResultsCount", searchResultsCount);
    if (searchResultsCount == 1) {
      // TODO: check current map zoom level; if less than 9, set it to 9
      var listener = google.maps.event.addListener(map, "idle", function() {
          map.setZoom(9);
          google.maps.event.removeListener(listener);
      })
    }
  }; // end initialize

  google.maps.event.addDomListener(window, 'load', initialize);

  // function myClick(feature_id) {
  //   google.maps.event.trigger(markers[feature_id], 'click');
  // }
  //
  // function myHover(feature_id) {
  //   google.maps.event.trigger(markers[feature_id], 'mouseover');
  // }
  //
  // function deleteMarker(feature_id) {
  //   markers[feature_id].setMap(null);
  //   markers[feature_id]=null;
  // }

  // markers bounce when their search result is hovered
  function toggleBounce(feature_id) {
      var markerId = markers[feature_id];
      var marker = window[markerId];
      if (marker.getAnimation() != null) {
          marker.setAnimation(null);
      } else {
          marker.setAnimation(google.maps.Animation.BOUNCE);
      }
  }

  // used to resize map when side panel is hidden by user
  // function mapResize() {
  //     google.maps.event.trigger(map, 'resize');
  // }
